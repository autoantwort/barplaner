datasource db {
  provider = "sqlite"
  url      = "file:data.sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model UserRoles {
  createdAt DateTime
  updatedAt DateTime
  userId    Int
  roleName  String
  roles     roles    @relation(fields: [roleName], references: [name], onDelete: Cascade) @ignore
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleName])
}

model answers {
  userId     Int
  questionId Int
  value      String?   @default("no_answer")
  createdAt  DateTime
  updatedAt  DateTime
  questions  questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
}

model barduties {
  barID         Int
  userID        Int
  state         String?                    @default("no_info")
  job           String?                    @default("")
  from          String?                    @default("")
  to            String?                    @default("")
  have_to_clean Boolean?                   @default(false)
  createdAt     DateTime
  updatedAt     DateTime
  bars          bars                       @relation(fields: [barID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users                      @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([barID, userID])
}

model bars {
  id                    Int                        @id @default(autoincrement())
  name                  String?
  description           String?
  public                Boolean?                   @default(true)
  canceled              Boolean?                   @default(false)
  start                 DateTime?
  end                   DateTime?
  facebookEventID       String?
  facebookCoverImageURL String?
  createdAt             DateTime
  updatedAt             DateTime
  barduties             barduties[]
}

model files {
  id                              String     @id
  filename                        String?
  mimeType                        String?
  telegramFileId                  String?
  createdAt                       DateTime
  updatedAt                       DateTime
  images_filesToimages_compressed images[]   @relation("filesToimages_compressed")
  images_filesToimages_original   images[]   @relation("filesToimages_original")
  invoices                        invoices[]
}

model images {
  id                             Int              @id @default(autoincrement())
  titel                          String?
  createdAt                      DateTime
  updatedAt                      DateTime
  original                       String?
  compressed                     String?
  files_filesToimages_compressed files?           @relation("filesToimages_compressed", fields: [compressed], references: [id])
  files_filesToimages_original   files?           @relation("filesToimages_original", fields: [original], references: [id])
  stockItems                     stockItems[]
  stockPositions                 stockPositions[]
}

model invoiceEntries {
  id              Int            @id @default(autoincrement())
  itemDescription String
  articleNumber   String?
  gtin            String?
  quantity        Int
  amount          Int?
  unit            String?
  netPrice        Decimal?
  brottoPrice     Decimal?
  images          String?
  productSite     String?
  alcoholByVolume Decimal?
  createdAt       DateTime
  updatedAt       DateTime
  invoiceId       Int?
  stockItemId     Int?
  invoices        invoices?      @relation(fields: [invoiceId], references: [id])
  stockItems      stockItems?    @relation(fields: [stockItemId], references: [id])
  stockChanges    stockChanges[]
}

model invoices {
  id                    Int              @id @default(autoincrement())
  deliveryDate          DateTime?
  invoiceDate           DateTime?
  seller                String?
  extraCostsDescription String?
  extraCostsAmount      Decimal?
  createdAt             DateTime
  updatedAt             DateTime
  fileId                String?
  files                 files?           @relation(fields: [fileId], references: [id])
  invoiceEntries        invoiceEntries[]
}

model itemGroups {
  id                   Int             @id @default(autoincrement())
  name                 String?         @unique(map: "sqlite_autoindex_itemGroups_1")
  nameColognePhonetics String?
  minimumCount         Decimal?        @default(0)
  idealCount           Decimal?
  createdAt            DateTime
  updatedAt            DateTime
  stockPositionId      Int?
  stockPositions       stockPositions? @relation(fields: [stockPositionId], references: [id])
  stockItems           stockItems[]
}

model questions {
  id        Int       @id @default(autoincrement())
  text      String?
  surveyId  Int?
  createdAt DateTime
  updatedAt DateTime
  surveys   surveys?  @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers   answers[]
}

model roles {
  name        String      @id
  description String?
  createdAt   DateTime
  updatedAt   DateTime
  UserRoles   UserRoles[]
  settings    settings[]
}

model settings {
  name        String   @id
  permission  String?
  description String?  @default("")
  value       String?  @default("")
  createdAt   DateTime
  updatedAt   DateTime
  roles       roles?   @relation(fields: [permission], references: [name], onDelete: NoAction, onUpdate: NoAction)
}


model shouldDeletes {
  chatID      BigInt
  messageID   BigInt
  deleteAfter DateTime?
  newText     String?
  createdAt   DateTime
  updatedAt   DateTime

  @@id([chatID, messageID])
}

model stockChanges {
  id             Int             @id @default(autoincrement())
  date           DateTime
  netPrice       Decimal?
  brottoPrice    Decimal?
  amount         Decimal
  priceAccuracy  String?
  reason         String?
  note           String?
  createdAt      DateTime
  updatedAt      DateTime
  itemId         Int
  userId         Int?
  invoiceEntryId Int?
  invoiceEntries invoiceEntries? @relation(fields: [invoiceEntryId], references: [id])
  stockItems     stockItems      @relation(fields: [itemId], references: [id], onDelete: NoAction)
  users          users?          @relation(fields: [userId], references: [id])
}

model stockItems {
  id                   Int              @id @default(autoincrement())
  name                 String?
  nameColognePhonetics String?
  barcode              String?
  articleNumber        String?
  seller               String?
  amount               Int?
  unit                 String?
  internalNote         String?
  website              String?
  alcoholByVolume      Decimal?
  createdAt            DateTime
  updatedAt            DateTime
  itemGroupId          Int?
  stockPositionId      Int?
  imageId              Int?
  images               images?          @relation(fields: [imageId], references: [id])
  itemGroups           itemGroups?      @relation(fields: [itemGroupId], references: [id])
  stockPositions       stockPositions?  @relation(fields: [stockPositionId], references: [id])
  invoiceEntries       invoiceEntries[]
  stockChanges         stockChanges[]

  @@unique([barcode, seller], map: "sqlite_autoindex_stockItems_1")
}

model stockPositions {
  id                   Int          @id @default(autoincrement())
  name                 String?      @unique(map: "sqlite_autoindex_stockPositions_1")
  nameColognePhonetics String?
  description          String?
  xPositionOnImage     Float?
  yPositionOnImage     Float?
  room                 String?
  createdAt            DateTime
  updatedAt            DateTime
  imageId              Int?
  images               images?      @relation(fields: [imageId], references: [id])
  itemGroups           itemGroups[]
  stockItems           stockItems[]
}

model surveys {
  id                   Int                        @id @default(autoincrement())
  question             String?
  creatorId            Int?
  end                  DateTime?
  allowMultipleAnswers Boolean?
  createdAt            DateTime
  updatedAt            DateTime
  users                users?                     @relation(fields: [creatorId], references: [id])
  questions            questions[]
}

model telegramNewsletters {
  chatId         Int                        @id @default(autoincrement())
  enabled        Boolean?                   @default(true)
  sendAt         String?                    @default("1500")
  sendDaysBefore String?                    @default("[0,1,3,8]")
  createdAt      DateTime
  updatedAt      DateTime
}

model users {
  id                                         Int                        @id @default(autoincrement())
  name                                       String?                    @unique(map: "sqlite_autoindex_users_1")
  password                                   String?
  email                                      String?
  phone                                      String?
  telegramID                                 String?
  gitLabID                                   Int?
  active                                     Boolean?                   @default(true)
  sessionID                                  String?                    @unique(map: "sqlite_autoindex_users_2")
  experienced_cleaner                        Boolean?                   @default(false)
  birthday                                   String?
  only_show_gitlab_notifications_if_assigned Boolean                    @default(false)
  createdAt                                  DateTime
  updatedAt                                  DateTime
  UserRoles                                  UserRoles[]
  answers                                    answers[]
  barduties                                  barduties[]
  stockChanges                               stockChanges[]
  surveys                                    surveys[]
}

model webPushSubscriptions {
  endpoint     String  @id
  subscription String?
  createdAt    DateTime
  updatedAt    DateTime
}
