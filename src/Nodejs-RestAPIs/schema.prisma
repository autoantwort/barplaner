datasource db {
  provider = "sqlite"
  url      = "file:data.sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model UserRole {
  userId    Int
  roleName  String
  roles     Role     @relation(fields: [roleName], references: [name], onDelete: Cascade)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@id([userId, roleName])
  @@map("UserRoles")
}

model Answer {
  userId     Int
  questionId Int
  value      String?   @default("no_answer")
  questions  Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  users      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@id([userId, questionId])
  @@map("Answers")
}

model Barduty {
  barID         Int
  userID        Int
  state         String                     @default("no_info")
  job           String                     @default("")
  from          String                     @default("")
  to            String                     @default("")
  have_to_clean Boolean                   @default(false)
  bars          Bar                        @relation(fields: [barID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         User                       @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@id([barID, userID])
  @@map("Barduties")
}

model Bar {
  id                    Int                        @id @default(autoincrement())
  name                  String?
  description           String?
  public                Boolean?                   @default(true)
  canceled              Boolean?                   @default(false)
  start                 DateTime?
  end                   DateTime?
  facebookEventID       String?
  facebookCoverImageURL String?
  barduties             Barduty[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Bars")
}

model File {
  id                              String     @id
  filename                        String?
  mimeType                        String?
  telegramFileId                  String?
  images_filesToimages_compressed Image[]   @relation("filesToimages_compressed")
  images_filesToimages_original   Image[]   @relation("filesToimages_original")
  invoices                        Invoice[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Files")
}

model Image {
  id                             Int              @id @default(autoincrement())
  titel                          String?
  original                       String?
  compressed                     String?
  files_filesToimages_compressed File?            @relation("filesToimages_compressed", fields: [compressed], references: [id])
  files_filesToimages_original   File?            @relation("filesToimages_original", fields: [original], references: [id])
  stockItems                     StockItem[]
  stockPositions                 StockPosition[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Images")
}

model InvoiceEntry {
  id              Int            @id @default(autoincrement())
  itemDescription String
  articleNumber   String?
  gtin            String?
  quantity        Int
  amount          Int?
  unit            String?
  netPrice        Decimal?
  brottoPrice     Decimal?
  images          String?
  productSite     String?
  alcoholByVolume Decimal?
  invoiceId       Int?
  stockItemId     Int?
  invoices        Invoice?       @relation(fields: [invoiceId], references: [id])
  stockItems      StockItem?     @relation(fields: [stockItemId], references: [id])
  stockChanges    StockChange[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("InvoiceEntries")
}

model Invoice {
  id                    Int              @id @default(autoincrement())
  deliveryDate          DateTime?
  invoiceDate           DateTime?
  seller                String?
  extraCostsDescription String?
  extraCostsAmount      Decimal?
  fileId                String?
  files                 File?           @relation(fields: [fileId], references: [id])
  invoiceEntries        InvoiceEntry[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Invoices")
}

model ItemGroup {
  id                   Int             @id @default(autoincrement())
  name                 String?         @unique(map: "sqlite_autoindex_itemGroups_1")
  nameColognePhonetics String?
  minimumCount         Decimal?        @default(0)
  idealCount           Decimal?
  stockPositionId      Int?
  stockPositions       StockPosition?  @relation(fields: [stockPositionId], references: [id])
  stockItems           StockItem[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("ItemGroups")
}

model Question {
  id        Int       @id @default(autoincrement())
  text      String?
  surveyId  Int?
  surveys   Survey?   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers   Answer[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Questions")
}

model Role {
  name        String      @id
  description String?
  UserRoles   UserRole[]
  settings    Setting[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Roles")
}

model Setting {
  name        String   @id
  permission  String?
  description String?  @default("")
  value       String?  @default("")
  roles       Role?    @relation(fields: [permission], references: [name], onDelete: NoAction, onUpdate: NoAction)

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Settings")
}


model ShouldDelete {
  chatID      BigInt
  messageID   BigInt
  deleteAfter DateTime?
  newText     String?

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@id([chatID, messageID])
  @@map("ShouldDeletes")
}

model StockChange {
  id             Int             @id @default(autoincrement())
  date           DateTime
  netPrice       Decimal?
  brottoPrice    Decimal?
  amount         Decimal
  priceAccuracy  String?
  reason         String?
  note           String?
  itemId         Int
  userId         Int?
  invoiceEntryId Int?
  invoiceEntries InvoiceEntry?   @relation(fields: [invoiceEntryId], references: [id])
  stockItems     StockItem       @relation(fields: [itemId], references: [id], onDelete: NoAction)
  users          User?           @relation(fields: [userId], references: [id])

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("StockChanges")
}

model StockItem {
  id                   Int              @id @default(autoincrement())
  name                 String?
  nameColognePhonetics String?
  barcode              String?
  articleNumber        String?
  seller               String?
  amount               Int?
  unit                 String?
  internalNote         String?
  website              String?
  alcoholByVolume      Decimal?
  itemGroupId          Int?
  stockPositionId      Int?
  imageId              Int?
  images               Image?           @relation(fields: [imageId], references: [id])
  itemGroups           ItemGroup?       @relation(fields: [itemGroupId], references: [id])
  stockPositions       StockPosition?   @relation(fields: [stockPositionId], references: [id])
  invoiceEntries       InvoiceEntry[]
  stockChanges         StockChange[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@unique([barcode, seller], map: "sqlite_autoindex_stockItems_1")
  @@map("StockItems")
}

model StockPosition {
  id                   Int          @id @default(autoincrement())
  name                 String?      @unique(map: "sqlite_autoindex_stockPositions_1")
  nameColognePhonetics String?
  description          String?
  xPositionOnImage     Float?
  yPositionOnImage     Float?
  room                 String?
  imageId              Int?
  images               Image?       @relation(fields: [imageId], references: [id])
  itemGroups           ItemGroup[]
  stockItems           StockItem[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

 @@map("StockPositions") 
}

model Survey {
  id                   Int                        @id @default(autoincrement())
  question             String?
  creatorId            Int?
  end                  DateTime?
  allowMultipleAnswers Boolean?
  users                User?                      @relation(fields: [creatorId], references: [id])
  questions            Question[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Surveys")
}

model TelegramNewsletter {
  chatId         Int                        @id @default(autoincrement())
  enabled        Boolean?                   @default(true)
  sendAt         String?                    @default("1500")
  sendDaysBefore String?                    @default("[0,1,3,8]")

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("TelegramNewsletters")
}

model User {
  id                                         Int                        @id @default(autoincrement())
  name                                       String?                    @unique(map: "sqlite_autoindex_users_1")
  password                                   String?
  email                                      String?
  phone                                      String?
  telegramID                                 String?
  gitLabID                                   Int?
  active                                     Boolean?                   @default(true)
  sessionID                                  String?                    @unique(map: "sqlite_autoindex_users_2")
  experienced_cleaner                        Boolean?                   @default(false)
  birthday                                   String?
  only_show_gitlab_notifications_if_assigned Boolean                    @default(false)
  user_roles                                 UserRole[]
  answers                                    Answer[]
  barduties                                  Barduty[]
  stockChanges                               StockChange[]
  surveys                                    Survey[]

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("Users")
}

model WebPushSubscription {
  endpoint     String  @id
  subscription String?

  // Metadata
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("WebPushSubscriptions")
}
